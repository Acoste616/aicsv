#!/usr/bin/env python3
"""
Szybki test czy nowy ContentExtractor dzia≈Ça lepiej
"""

import logging
from content_extractor import ContentExtractor

logging.basicConfig(level=logging.INFO)

def quick_test():
    print("üß™ SZYBKI TEST CONTENTEXTRACTOR")
    print("=" * 50)
    
    extractor = ContentExtractor()
    
    # Testuj z prawdziwymi URL z tweet√≥w (r√≥≈ºne typy tre≈õci)
    test_urls = [
        "https://t.co/0lLjxGSCue",  # Nowy link testowy 1
        "https://t.co/d0wPyTGnDh",  # Nowy link testowy 2
        "https://t.co/FCUsmol5XR",  # Poprzedni dzia≈ÇajƒÖcy
        "https://github.com/langchain-ai/langchain",  # Referencyjny - zawsze dzia≈Ça
        "https://openai.com/blog/chatgpt",  # Trudny przypadek
    ]
    
    success_count = 0
    total_chars = 0
    
    for i, url in enumerate(test_urls, 1):
        print(f"\nüîó URL {i}/5: {url}")
        print("-" * 50)
        
        # U≈ºyj nowej metody z retry
        content = extractor.extract_with_retry(url, max_retries=2)
        
        if content:
            char_count = len(content)
            total_chars += char_count
            
            print(f"‚úÖ Sukces! Pobrano {char_count} znak√≥w")
            
            # Sprawd≈∫ jako≈õƒá tre≈õci
            if char_count < 100:
                print("‚ö†Ô∏è  Tre≈õƒá bardzo kr√≥tka - mo≈ºliwy b≈ÇƒÖd")
            elif "javascript" in content.lower()[:200]:
                print("‚ö†Ô∏è  Mo≈ºliwy komunikat o JavaScript")
            elif "tre≈õƒá niedostƒôpna" in content.lower():
                print("‚ö†Ô∏è  Tre≈õƒá niedostƒôpna - strona blokuje boty")
            elif char_count > 500:
                print("‚úÖ Tre≈õƒá wyglƒÖda bardzo dobrze!")
                success_count += 1
            else:
                print("‚úÖ Tre≈õƒá wyglƒÖda dobrze!")
                success_count += 1
                
            # Poka≈º fragment
            print(f"\nüìÑ Fragment tre≈õci:")
            print("-" * 40)
            print(content[:400])
            if len(content) > 400:
                print("...")
        else:
            print("‚ùå Nie uda≈Ço siƒô pobraƒá tre≈õci")
    
    # Podsumowanie
    print(f"\n{'='*60}")
    print("üìä PODSUMOWANIE TEST√ìW")
    print(f"{'='*60}")
    print(f"‚úÖ Sukces: {success_count}/5 ({(success_count/5)*100:.0f}%)")
    print(f"üìè ≈örednia d≈Çugo≈õƒá: {total_chars//5 if total_chars > 0 else 0} znak√≥w")
    print(f"üìà ≈ÅƒÖczna tre≈õƒá: {total_chars} znak√≥w")
    
    if success_count >= 4:
        print("üéâ DOSKONA≈ÅY WYNIK! ContentExtractor dzia≈Ça ≈õwietnie!")
    elif success_count >= 3:
        print("‚úÖ DOBRY WYNIK! Wiƒôkszo≈õƒá stron dzia≈Ça poprawnie")
    elif success_count >= 2:
        print("‚ö†Ô∏è  ≈öREDNI WYNIK - wymaga dalszych optymalizacji")
    else:
        print("‚ùå S≈ÅABY WYNIK - potrzebne powa≈ºne poprawki")
    
    extractor.close()
    print("\n‚úÖ Test zako≈Ñczony!")

if __name__ == "__main__":
    quick_test() 