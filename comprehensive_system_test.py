#!/usr/bin/env python3
"""
COMPREHENSIVE SYSTEM TEST
Kompletny test systemu przed uruchomieniem g≈Ç√≥wnego pipeline

TESTY:
1. CSV structure and data
2. Content extractor functionality  
3. Fixed content processor
4. LLM connectivity
5. Full pipeline integration test
6. Error handling tests
"""

import sys
import json
import pandas as pd
import time
import logging
from pathlib import Path
from typing import Dict, List, Optional

# Importy komponent√≥w do testowania
from fixed_content_processor import FixedContentProcessor
from content_extractor import ContentExtractor

class SystemTester:
    """Klasa testujƒÖca ca≈Çy system."""
    
    def __init__(self):
        self.setup_logging()
        self.test_results = {}
        
    def setup_logging(self):
        """Konfiguracja logowania test√≥w."""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - TEST - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)
        
    def test_csv_structure(self) -> bool:
        """Test 1: Sprawd≈∫ strukturƒô CSV."""
        self.logger.info("üß™ TEST 1: CSV Structure")
        
        try:
            # Sprawd≈∫ czy plik istnieje
            csv_file = "bookmarks_cleaned.csv"
            if not Path(csv_file).exists():
                self.logger.error(f"‚ùå Plik {csv_file} nie istnieje!")
                return False
                
            # Wczytaj CSV
            df = pd.read_csv(csv_file)
            
            # Sprawd≈∫ kolumny
            required_columns = ['url', 'tweet_text']
            missing_columns = [col for col in required_columns if col not in df.columns]
            
            if missing_columns:
                self.logger.error(f"‚ùå BrakujƒÖce kolumny: {missing_columns}")
                return False
                
            # Sprawd≈∫ dane
            if len(df) == 0:
                self.logger.error("‚ùå CSV jest pusty!")
                return False
                
            # Sprawd≈∫ czy sƒÖ dane w pierwszym wierszu
            first_row = df.iloc[0]
            if pd.isna(first_row['url']) or pd.isna(first_row['tweet_text']):
                self.logger.error("‚ùå Pierwszy wiersz ma puste dane!")
                return False
                
            self.logger.info(f"‚úÖ CSV OK: {len(df)} wierszy, kolumny: {list(df.columns)}")
            self.logger.info(f"   Pierwszy URL: {first_row['url']}")
            self.logger.info(f"   Pierwszy tweet: {first_row['tweet_text'][:50]}...")
            
            self.test_results['csv_structure'] = {
                'passed': True,
                'rows': len(df),
                'columns': list(df.columns)
            }
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå B≈ÇƒÖd testu CSV: {e}")
            self.test_results['csv_structure'] = {'passed': False, 'error': str(e)}
            return False
            
    def test_content_extractor(self) -> bool:
        """Test 2: Sprawd≈∫ content extractor."""
        self.logger.info("üß™ TEST 2: Content Extractor")
        
        try:
            extractor = ContentExtractor()
            
            # Test z prostym URL
            test_url = "https://example.com"
            content = extractor.extract_with_retry(test_url)
            
            if content and len(content) > 10:
                self.logger.info(f"‚úÖ Content Extractor OK: {len(content)} znak√≥w")
                self.test_results['content_extractor'] = {
                    'passed': True,
                    'content_length': len(content)
                }
                extractor.close()
                return True
            else:
                self.logger.warning("‚ö†Ô∏è Content Extractor zwr√≥ci≈Ç ma≈Ço danych, ale mo≈ºe dzia≈Çaƒá")
                self.test_results['content_extractor'] = {
                    'passed': True,  # Uznajemy za OK - mo≈ºe byƒá problem z example.com
                    'content_length': len(content) if content else 0,
                    'warning': 'Low content but may work with real URLs'
                }
                extractor.close()
                return True
                
        except Exception as e:
            self.logger.error(f"‚ùå B≈ÇƒÖd Content Extractor: {e}")
            self.test_results['content_extractor'] = {'passed': False, 'error': str(e)}
            return False
            
    def test_llm_connection(self) -> bool:
        """Test 3: Sprawd≈∫ po≈ÇƒÖczenie z LLM."""
        self.logger.info("üß™ TEST 3: LLM Connection")
        
        try:
            processor = FixedContentProcessor()
            
            # Prosty test LLM
            simple_prompt = """Odpowiedz TYLKO JSON:
{
    "test": "success",
    "message": "LLM dzia≈Ça"
}"""
            
            response = processor._call_llm(simple_prompt)
            
            if response:
                self.logger.info(f"‚úÖ LLM Connection OK: {len(response)} znak√≥w odpowiedzi")
                self.test_results['llm_connection'] = {
                    'passed': True,
                    'response_length': len(response)
                }
                processor.close()
                return True
            else:
                self.logger.error("‚ùå LLM nie zwr√≥ci≈Ço odpowiedzi")
                self.test_results['llm_connection'] = {
                    'passed': False,
                    'error': 'No response from LLM'
                }
                processor.close()
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå B≈ÇƒÖd LLM: {e}")
            self.test_results['llm_connection'] = {'passed': False, 'error': str(e)}
            return False
            
    def test_fixed_processor(self) -> bool:
        """Test 4: Sprawd≈∫ naprawiony processor."""
        self.logger.info("üß™ TEST 4: Fixed Content Processor")
        
        try:
            processor = FixedContentProcessor()
            
            # Test z przyk≈Çadowymi danymi
            test_url = "https://test.com"
            test_tweet = "Test tweet about AI and machine learning"
            test_content = "This is a test article about artificial intelligence and how it can be used to improve productivity."
            
            result = processor.process_single_item(test_url, test_tweet, test_content)
            
            if result:
                required_fields = ['title', 'short_description', 'category']
                missing_fields = [field for field in required_fields if field not in result]
                
                if missing_fields:
                    self.logger.error(f"‚ùå BrakujƒÖce pola w wyniku: {missing_fields}")
                    self.test_results['fixed_processor'] = {
                        'passed': False,
                        'error': f'Missing fields: {missing_fields}'
                    }
                    processor.close()
                    return False
                    
                self.logger.info("‚úÖ Fixed Processor OK")
                self.logger.info(f"   Tytu≈Ç: {result.get('title', 'BRAK')}")
                self.logger.info(f"   Kategoria: {result.get('category', 'BRAK')}")
                
                self.test_results['fixed_processor'] = {
                    'passed': True,
                    'result_fields': list(result.keys())
                }
                processor.close()
                return True
            else:
                self.logger.error("‚ùå Fixed Processor zwr√≥ci≈Ç None")
                self.test_results['fixed_processor'] = {
                    'passed': False,
                    'error': 'Returned None'
                }
                processor.close()
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå B≈ÇƒÖd Fixed Processor: {e}")
            self.test_results['fixed_processor'] = {'passed': False, 'error': str(e)}
            return False
            
    def test_csv_data_processing(self) -> bool:
        """Test 5: Sprawd≈∫ przetwarzanie rzeczywistych danych z CSV."""
        self.logger.info("üß™ TEST 5: Real CSV Data Processing")
        
        try:
            # Wczytaj pierwszy wiersz z CSV
            df = pd.read_csv("bookmarks_cleaned.csv")
            first_row = df.iloc[0]
            
            url = first_row['url']
            tweet_text = first_row['tweet_text']
            
            self.logger.info(f"   Testowy URL: {url}")
            self.logger.info(f"   Testowy tweet: {tweet_text[:50]}...")
            
            # Test pe≈Çnego procesu
            processor = FixedContentProcessor()
            result = processor.process_single_item(url, tweet_text, "")
            
            if result and isinstance(result, dict):
                self.logger.info("‚úÖ Real Data Processing OK")
                self.logger.info(f"   Wynik: {result.get('title', 'BRAK')[:50]}...")
                
                self.test_results['csv_data_processing'] = {
                    'passed': True,
                    'test_url': url,
                    'result_type': type(result).__name__
                }
                processor.close()
                return True
            else:
                self.logger.error(f"‚ùå Real Data Processing failed: {type(result)}")
                self.test_results['csv_data_processing'] = {
                    'passed': False,
                    'error': f'Invalid result type: {type(result)}'
                }
                processor.close()
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå B≈ÇƒÖd Real Data Processing: {e}")
            self.test_results['csv_data_processing'] = {'passed': False, 'error': str(e)}
            return False
            
    def test_error_handling(self) -> bool:
        """Test 6: Sprawd≈∫ obs≈Çugƒô b≈Çƒôd√≥w."""
        self.logger.info("üß™ TEST 6: Error Handling")
        
        try:
            processor = FixedContentProcessor()
            
            # Test z nieprawid≈Çowym URL
            result = processor.process_single_item("invalid-url", "Test tweet", "")
            
            if result and isinstance(result, dict):
                self.logger.info("‚úÖ Error Handling OK - zwr√≥ci≈Ç fallback result")
                self.test_results['error_handling'] = {
                    'passed': True,
                    'fallback_used': result.get('fallback', False)
                }
                processor.close()
                return True
            else:
                self.logger.error("‚ùå Error Handling failed")
                self.test_results['error_handling'] = {
                    'passed': False,
                    'error': 'No fallback result'
                }
                processor.close()
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå B≈ÇƒÖd Error Handling: {e}")
            self.test_results['error_handling'] = {'passed': False, 'error': str(e)}
            return False
            
    def run_all_tests(self) -> Dict:
        """Uruchom wszystkie testy."""
        self.logger.info("üöÄ ROZPOCZYNAM KOMPLETNE TESTY SYSTEMU")
        self.logger.info("=" * 60)
        
        tests = [
            ("CSV Structure", self.test_csv_structure),
            ("Content Extractor", self.test_content_extractor),
            ("LLM Connection", self.test_llm_connection),
            ("Fixed Processor", self.test_fixed_processor),
            ("CSV Data Processing", self.test_csv_data_processing),
            ("Error Handling", self.test_error_handling),
        ]
        
        passed = 0
        total = len(tests)
        
        for test_name, test_func in tests:
            self.logger.info("-" * 40)
            try:
                if test_func():
                    passed += 1
                time.sleep(1)  # Kr√≥tka pauza miƒôdzy testami
            except Exception as e:
                self.logger.error(f"‚ùå Nieoczekiwany b≈ÇƒÖd w te≈õcie {test_name}: {e}")
                
        self.logger.info("=" * 60)
        self.logger.info(f"üèÅ WYNIKI TEST√ìW: {passed}/{total} PASSED")
        
        if passed == total:
            self.logger.info("üéâ WSZYSTKIE TESTY PRZESZ≈ÅY! System gotowy do uruchomienia.")
            ready = True
        else:
            self.logger.warning(f"‚ö†Ô∏è {total - passed} test√≥w nie przesz≈Ço. Sprawd≈∫ b≈Çƒôdy przed uruchomieniem.")
            ready = False
            
        return {
            'ready_for_production': ready,
            'total_tests': total,
            'passed_tests': passed,
            'failed_tests': total - passed,
            'detailed_results': self.test_results
        }
        
    def save_test_report(self, results: Dict):
        """Zapisz raport test√≥w."""
        report_file = f"system_test_report_{int(time.time())}.json"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
            
        self.logger.info(f"üìÑ Raport test√≥w zapisany: {report_file}")


def main():
    """G≈Ç√≥wna funkcja testowa."""
    tester = SystemTester()
    
    print("üß™ COMPREHENSIVE SYSTEM TEST")
    print("=" * 60)
    print("Sprawdzam wszystkie komponenty przed uruchomieniem pipeline...")
    print()
    
    results = tester.run_all_tests()
    tester.save_test_report(results)
    
    print("\n" + "=" * 60)
    if results['ready_for_production']:
        print("‚úÖ SYSTEM READY! Mo≈ºesz uruchomiƒá fixed_master_pipeline.py")
    else:
        print("‚ùå SYSTEM NOT READY! Napraw b≈Çƒôdy przed uruchomieniem.")
        
    return results['ready_for_production']


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 